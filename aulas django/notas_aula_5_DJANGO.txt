in this class I will explain how to create a simple forms, and First of all we will create a new view called create.html and inside of create we will extend the base.html to there, and add the Block Title and Content, like the example:

{% extends 'main/base.html' %}

{% block title %} Create New List {% endblock %}

{% block Content %}
Create Page
{% endblock %}

inside the Block Content, the forms we used to do is, with Html, but inside Django is much easier because you will call the object form, and Django will create the instance for HTML forms; and to create the forms inside our main aplication directory, that has the admin, we should create the forms.py file; inside of forms.py will import 

-from django import forms

and them create a class that will be our forms, need to have the exactly fields in database that will set; after that is very simple, we create an object and use the bible to use the forms.(sqlite3 or another database), like the example;

from django import forms

class CreateNewList(forms.Form):
    name = forms.CharField(label="Name", max_length=200);
and you can use this to create the forms you want, inside the link bellow you will find a list=
https://docs.djangoproject.com/en/3.1/ref/forms/fields/
them go your views, you should already create a view, and as parameter in the end, It has been passed the variable 'form': form, of course I import the forms from my file as the example:

from .forms import CreateNewList
from .(name of the file that has your file) import (name off the class that has the forms you wanted)

the same file can have as many forms you want, them I create a variable that I pass and receive the empty forms, as the example:

def create(response):
form = CreateNewList()
    return render(response, 'main/create.html', {"form": form})

but this forms isn't work yet, to show we have some diferents stuffs like inside the create.html where we get the object form can have diferent types as
form.as_table (the default);
form.as_p (the forms go down)
form.as_ul (comes as lists)

as a requiremente we use the {% csrf_token %} up from our forms, this is required to security;
so post and get the diference between then is the security, post will encript and more used to password or sensible data, alse get show the fields and what we complete; to finish this the get is to receive an ID or a field that you want to know, but the information go to the Url so to keep it safe we use post and when is something kind okay we used get;
now to understand better we will add a method inside the tag form inside the create.html, this mathod can be post or get, and now to validate this data we will go to the view we create to aply the form and inside them we will test if the forms receive the method, if True the form will receive the function we create inside forms.py pass as answer reponse.(method), them we can validate, if form.is_valid():
receive a variable receiving form.cleaned_data["field"], them the variable that will receive with name = (the another variable), and parameter from the table we are using, them only save this variable inside the database, as the examble bellow:

def create(response):
    if response.method == "POST":
        form = CreateNewList(response.POST)

        if form.is_valid():
            n = form.cleaned_data["name"]
            t = ToDoList(name=n)
            t.save()
    else:
        form = CreateNewList()
    return render(response, 'main/create.html', {"form": form})
